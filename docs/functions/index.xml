<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functions on VirtualDataSet</title>
    <link>http://docs.virtdata.io/functions/</link>
    <description>Recent content in Functions on VirtualDataSet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Jun 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://docs.virtdata.io/functions/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>collections</title>
      <link>http://docs.virtdata.io/functions/funcref_collections/</link>
      <pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://docs.virtdata.io/functions/funcref_collections/</guid>
      <description>Collection functions allow you to construct Java Lists, Maps or Sets. These functions often take the form of a higher-order function, where the inner function definitions are called to determine the size of the collection, the individual values to be added, etc.
HashedLineToStringList  long -&amp;gt; HashedLineToStringList(String: filename, int: minSize, int: maxSize) -&amp;gt; java.util.List  HashedLineToStringSet Return a pseudo-randomly created Set from the values in the specified file.
 long -&amp;gt; HashedLineToStringSet(String: filename, int: minSize, int: maxSize) -&amp;gt; java.</description>
    </item>
    
    <item>
      <title>conversion</title>
      <link>http://docs.virtdata.io/functions/funcref_conversion/</link>
      <pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://docs.virtdata.io/functions/funcref_conversion/</guid>
      <description>Conversion functions simply allow values of one type to be converted to another type in an obvious way.
LongToByte Convert the input long value to a byte, with negative values masked away.
 long -&amp;gt; LongToByte() -&amp;gt; Byte  LongToShort Convert the input value from long to short.
 long -&amp;gt; LongToShort() -&amp;gt; Short  ModuloToBigDecimal Return a {@code BigDecimal} value as the result of modulo division with the specified divisor.</description>
    </item>
    
    <item>
      <title>datetime</title>
      <link>http://docs.virtdata.io/functions/funcref_datetime/</link>
      <pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://docs.virtdata.io/functions/funcref_datetime/</guid>
      <description>Functions in this category know about times and dates, datetimes, seconds or millisecond epoch times, and so forth.
Some of the function in this category are designed to allow testing of UUID types which were designed to avoid determinism. This makes it possible to test systems which depend on UUIDs but which require determinism in test data.
StartingEpochMillis This function sets the minimum long value to the equivalent unix epoch time in milliseconds.</description>
    </item>
    
    <item>
      <title>diagnostics</title>
      <link>http://docs.virtdata.io/functions/funcref_diagnostics/</link>
      <pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://docs.virtdata.io/functions/funcref_diagnostics/</guid>
      <description>Diagnostic functions can be used to help you construct the right VirtData recipe.
Show Show diagnostic values for the thread-local variable map.
 Object -&amp;gt; Show() -&amp;gt; String  ex: Show() - Show all values in a json-like format  Object -&amp;gt; Show(String&amp;hellip; names) -&amp;gt; String  ex: Show(&#39;foo&#39;) - Show only the &amp;lsquo;foo&amp;rsquo; value in a json-like format ex: Show(&#39;foo&#39;,&#39;bar&#39;) - Show the &amp;lsquo;foo&amp;rsquo; and &amp;lsquo;bar&amp;rsquo; values in a json-like format  long -&amp;gt; Show() -&amp;gt; String  ex: Show() - Show all values in a json-like format  long -&amp;gt; Show(String&amp;hellip; names) -&amp;gt; String  ex: Show(&#39;foo&#39;) - Show only the &amp;lsquo;foo&amp;rsquo; value in a json-like format ex: Show(&#39;foo&#39;,&#39;bar&#39;) - Show the &amp;lsquo;foo&amp;rsquo; and &amp;lsquo;bar&amp;rsquo; values in a json-like format   ToLongFunction Adapts any compatible FunctionalInterface type to a LongFunction, for use with higher-order functions, when they require a LongFunction as an argument.</description>
    </item>
    
    <item>
      <title>distributions</title>
      <link>http://docs.virtdata.io/functions/funcref_distributions/</link>
      <pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://docs.virtdata.io/functions/funcref_distributions/</guid>
      <description>All of the distributions that are provided in the Apache Commons Math project are supported here, in multiple forms.
Continuous or Discrete These distributions break down into two main categories:
Continuous Distributions These are distributions over real numbers like 23.4323, with continuity across the values. Each of the continuous distributions can provide samples that fall on an interval of the real number line. Continuous probability distributions include the Normal distribution, and the Exponential distribution, among many others.</description>
    </item>
    
    <item>
      <title>general</title>
      <link>http://docs.virtdata.io/functions/funcref_general/</link>
      <pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://docs.virtdata.io/functions/funcref_general/</guid>
      <description>These functions have no particular category, so they ended up here by default. This is where the bulk of basic functions can be found.
Add Adds a value to the input.
 double -&amp;gt; Add(double: addend) -&amp;gt; double long -&amp;gt; Add(long: addend) -&amp;gt; int long -&amp;gt; Add(long: addend) -&amp;gt; long int -&amp;gt; Add(int: addend) -&amp;gt; int  ex: Add(23) - adds integer 23 to the input integer value   AddCycleRange Adds a cycle range to the input, producing an increasing sawtooth-like output.</description>
    </item>
    
    <item>
      <title>premade</title>
      <link>http://docs.virtdata.io/functions/funcref_premade/</link>
      <pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://docs.virtdata.io/functions/funcref_premade/</guid>
      <description>Functions in this category are meant to provide easy grab-and-go functions that are tailored for real-world simulation. This library will grow over time.
FirstNames Return a pseudo-randomly sampled first name from the last US census data on first names occurring more than 100 times. Both male and female names are combined in this function.
 long -&amp;gt; FirstNames() -&amp;gt; String  ex: FirstNames() - select a random first name based on the chance of seeing it in the census data  long -&amp;gt; FirstNames(String: modifier) -&amp;gt; String  ex: FirstNames(&#39;map&#39;) - select over the first names by probability as input varies from 1L to Long.</description>
    </item>
    
    <item>
      <title>state</title>
      <link>http://docs.virtdata.io/functions/funcref_state/</link>
      <pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://docs.virtdata.io/functions/funcref_state/</guid>
      <description>Functions in the state category allow you to do things with side-effects in the function flow. Specifically, they allow you to save or load values of named variables to thread-local registers.
Clear Clears the per-thread map which is used by the Expr function.
 Object -&amp;gt; Clear() -&amp;gt; Object  notes: Clear all named entries from the per-thread map. ex: Clear() - clear all thread-local variables  Object -&amp;gt; Clear(String&amp;hellip; names) -&amp;gt; Object  notes: Clear the specified names from the per-thread map.</description>
    </item>
    
  </channel>
</rss>